var documenterSearchIndex = {"docs":
[{"location":"examples/user_element/","page":"User element","title":"User element","text":"EditURL = \"https://github.com/KnutAM/FerriteMeshParser.jl/blob/main/docs/src/literate/user_element.jl\"","category":"page"},{"location":"examples/user_element/#User-element","page":"User element","title":"User element","text":"","category":"section"},{"location":"examples/user_element/","page":"User element","title":"User element","text":"In this example, we will add support for an element that is currently not supported inside the package: The linear wedge element, C3D6","category":"page"},{"location":"examples/user_element/","page":"User element","title":"User element","text":"(Image: )","category":"page"},{"location":"examples/user_element/","page":"User element","title":"User element","text":"For this element, it can be defined as a specific Ferrite.Cell type","category":"page"},{"location":"examples/user_element/","page":"User element","title":"User element","text":"using Ferrite, FerriteMeshParser\nLinearWedge = Ferrite.Cell{3,6,5}","category":"page"},{"location":"examples/user_element/","page":"User element","title":"User element","text":"For this element to work with Ferrite, one must define a new reference shape e.g. Wedge and the appropriate interpolations for this shape. In doing so, one also chooses the node order. Following the standard Ferrite conventions, the node order should be the same as in Abaqus as shown above. To change this, it is possible to overload the function FerriteMeshParser.create_cell as follows","category":"page"},{"location":"examples/user_element/","page":"User element","title":"User element","text":"create_cell(::Type{LinearWedge}, node_numbers, ::FerriteMeshParser.AbaqusMeshFormat) = LinearWedge(ntuple(j->node_numbers[j], length(node_numbers)))","category":"page"},{"location":"examples/user_element/","page":"User element","title":"User element","text":"This setup allows changing the node order for your specific element. It is also possible to use another type which is not a variant of Ferrite.Cell, but rather a subtype of Ferrite.AbstractCell. After these modifications, one can import the mesh by specifying that the Abaqus code C3D6 should be interpreted as a LinearWedge:","category":"page"},{"location":"examples/user_element/","page":"User element","title":"User element","text":"grid = get_ferrite_grid(\"wedge_element.inp\"; user_elements=Dict(\"C3D6\"=>LinearWedge));\nnothing #hide","category":"page"},{"location":"examples/user_element/","page":"User element","title":"User element","text":"Giving the following grid","category":"page"},{"location":"examples/user_element/","page":"User element","title":"User element","text":"println(typeof(grid))\nprintln(unique(typeof.(getcells(grid))))    # The different cell types in the grid","category":"page"},{"location":"examples/user_element/#user-element-plain-program","page":"User element","title":"Plain Program","text":"","category":"section"},{"location":"examples/user_element/","page":"User element","title":"User element","text":"Below follows a version of the program without any comments. The file is also available here: user_element.jl","category":"page"},{"location":"examples/user_element/","page":"User element","title":"User element","text":"using Ferrite, FerriteMeshParser\nLinearWedge = Ferrite.Cell{3,6,5}\n\ncreate_cell(::Type{LinearWedge}, node_numbers, ::FerriteMeshParser.AbaqusMeshFormat) = LinearWedge(ntuple(j->node_numbers[j], length(node_numbers)))\n\ngrid = get_ferrite_grid(\"wedge_element.inp\"; user_elements=Dict(\"C3D6\"=>LinearWedge));\n\nprintln(typeof(grid))\nprintln(unique(typeof.(getcells(grid))))    # The different cell types in the grid\n\n# This file was generated using Literate.jl, https://github.com/fredrikekre/Literate.jl","category":"page"},{"location":"examples/user_element/","page":"User element","title":"User element","text":"","category":"page"},{"location":"examples/user_element/","page":"User element","title":"User element","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"EditURL = \"https://github.com/KnutAM/FerriteMeshParser.jl/blob/main/docs/src/literate/mixed_dof_handler.jl\"","category":"page"},{"location":"examples/mixed_dof_handler/#Using-the-MixedDofHandler","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"","category":"section"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"In this example, we will import a 2d mesh of a Compact Tension (CT) specimen from Abaqus to simulate the elastic stresses around the crack tip","category":"page"},{"location":"examples/mixed_dof_handler/#Imported-Abaqus-mesh","page":"Using the MixedDofHandler","title":"Imported Abaqus mesh","text":"","category":"section"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"(Image: ) Figure 1: Geometry and sets, mesh overview and detailed mesh from Abaqus.","category":"page"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"We have created sets for the hole (blue line: \"Hole\"), the symmetry edge (red line: \"Symmetry\"), and the crack zone (green area: \"CrackZone\").","category":"page"},{"location":"examples/mixed_dof_handler/#Importing-mesh","page":"Using the MixedDofHandler","title":"Importing mesh","text":"","category":"section"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"The mesh above was created in Abaqus cae, and in this example we import the generated input file: compact_tension.inp","category":"page"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"Installation of required packages for reference using Pkg Pkg.add(\"Ferrite\") Pkg.add(\"Tensors\") Pkg.add(\"https://github.com/KnutAM/FerriteMeshParser.jl.git\")","category":"page"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"Required packages","category":"page"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"using Ferrite, FerriteMeshParser, Tensors","category":"page"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"Simplified setup of linear isotropic elasticity for plane strain","category":"page"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"function material_stiffness(E=210.e3, ν=0.3)\n    G = E / 2(1 + ν)\n    K = E / 3(1 - 2ν)\n    I2 = one(SymmetricTensor{2,3})\n    I4vol = I2⊗I2\n    I4dev = otimesu(I2,I2) - I4vol / 3\n    stiff_3d = 2G*I4dev + K*I4vol\n    return SymmetricTensor{4,2}((i,j,k,l)->stiff_3d[i,j,k,l])\nend","category":"page"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"Assembly of all cells","category":"page"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"function doassemble!(cv, K, dh)\n    first_cellid = Dict(key => first(getcellset(dh.grid, key)) for key in keys(cv))\n    ndpc = Dict(key => ndofs_per_cell(dh, first_cellid[key]) for key in keys(cv))\n    Ke = Dict(key => zeros(n,n) for (key,n) in ndpc)\n\n    f = zeros(ndofs(dh))\n    assembler = start_assemble(K, f)\n\n    for key in keys(cv)\n        for cell in CellIterator(dh, collect(getcellset(dh.grid, key)))\n            assemble_cell!(assembler, cell, cv[key], Ke[key])\n        end\n    end\nend","category":"page"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"Assembly of specific cell (to allow dispatch on different celltypes)","category":"page"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"function assemble_cell!(assembler, cell, cv, Ke)\n    reinit!(cv, cell)\n    n_basefuncs = getnbasefunctions(cv)\n    fill!(Ke, 0)\n    for q_point in 1:getnquadpoints(cv)\n        dσdϵ = material_stiffness()\n        dΩ = getdetJdV(cv, q_point)\n        for i in 1:n_basefuncs\n            δ∇N = shape_symmetric_gradient(cv, q_point, i)\n            for j in 1:n_basefuncs\n                ∇N = shape_symmetric_gradient(cv, q_point, j)\n                Ke[i, j] += δ∇N ⊡ dσdϵ ⊡ ∇N * dΩ\n            end\n        end\n    end\n    assemble!(assembler, celldofs(cell), Ke)\nend","category":"page"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"Solve the finite element problem","category":"page"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"function solve()\n    # Import grid from abaqus mesh\n    grid = get_ferrite_grid(joinpath(@__DIR__, \"compact_tension.inp\"))\n\n    # Setup the interpolation and integration for each field\n    dim=Ferrite.getdim(grid)\n    grid_keys = [\"CPS4R\", \"CPS3\"]\n    qr = Dict(\"CPS4R\"=>QuadratureRule{dim, RefCube}(2), \"CPS3\"=>QuadratureRule{dim, RefTetrahedron}(1))\n    ip = Dict(\"CPS4R\"=>Lagrange{dim, RefCube, 1}(), \"CPS3\"=>Lagrange{dim, RefTetrahedron, 1}())\n    cv = Dict(key=>CellVectorValues(qr[key], ip[key]) for key in keys(ip))\n\n    # Setup the MixedDofHandler\n    fields = Dict(key=>Field(:u, ip[key], dim) for key in keys(ip))\n    dh = MixedDofHandler(grid)\n    for key in grid_keys # Use grid_keys to ensure correct order\n        push!(dh, FieldHandler([fields[key]], getcellset(grid, key)))\n    end\n    close!(dh)\n\n    # Add boundary conditions\n    ch = ConstraintHandler(dh);\n    bc_sym = Dirichlet(:u, getfaceset(grid, \"Symmetry\"), (x, t) -> 0, 1)\n    bc_hole = Dirichlet(:u, getfaceset(grid, \"Hole\"), (x, t) -> Vec{2}((-t, 0.0)), [1,2])\n\n    # Happens to be only quad elements on constrainted surfaces. How to do this more generally?\n    add!(ch, dh.fieldhandlers[1], bc_sym)\n    add!(ch, dh.fieldhandlers[1], bc_hole)\n    close!(ch)\n\n    # Assemble stiffness matrix\n    K = create_sparsity_pattern(dh);\n    doassemble!(cv, K, dh)\n\n    # Solve linear equation system\n    f = zeros(ndofs(dh))\n    update!(ch, 1.0)\n    apply!(K, f, ch)\n    u = K\\f\n\n    # Save displacement field\n    vtk_grid(joinpath(@__DIR__, \"mixed_dof_handler\"), dh) do vtk\n        vtk_point_data(vtk, dh, u)\n    end\nend","category":"page"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"Solve the actual problem","category":"page"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"solve()","category":"page"},{"location":"examples/mixed_dof_handler/#mixed-dof-handler-plain-program","page":"Using the MixedDofHandler","title":"Plain Program","text":"","category":"section"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"Below follows a version of the program without any comments. The file is also available here: mixeddofhandler.jl","category":"page"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"using Ferrite, FerriteMeshParser, Tensors\n\nfunction material_stiffness(E=210.e3, ν=0.3)\n    G = E / 2(1 + ν)\n    K = E / 3(1 - 2ν)\n    I2 = one(SymmetricTensor{2,3})\n    I4vol = I2⊗I2\n    I4dev = otimesu(I2,I2) - I4vol / 3\n    stiff_3d = 2G*I4dev + K*I4vol\n    return SymmetricTensor{4,2}((i,j,k,l)->stiff_3d[i,j,k,l])\nend\n\nfunction doassemble!(cv, K, dh)\n    first_cellid = Dict(key => first(getcellset(dh.grid, key)) for key in keys(cv))\n    ndpc = Dict(key => ndofs_per_cell(dh, first_cellid[key]) for key in keys(cv))\n    Ke = Dict(key => zeros(n,n) for (key,n) in ndpc)\n\n    f = zeros(ndofs(dh))\n    assembler = start_assemble(K, f)\n\n    for key in keys(cv)\n        for cell in CellIterator(dh, collect(getcellset(dh.grid, key)))\n            assemble_cell!(assembler, cell, cv[key], Ke[key])\n        end\n    end\nend\n\nfunction assemble_cell!(assembler, cell, cv, Ke)\n    reinit!(cv, cell)\n    n_basefuncs = getnbasefunctions(cv)\n    fill!(Ke, 0)\n    for q_point in 1:getnquadpoints(cv)\n        dσdϵ = material_stiffness()\n        dΩ = getdetJdV(cv, q_point)\n        for i in 1:n_basefuncs\n            δ∇N = shape_symmetric_gradient(cv, q_point, i)\n            for j in 1:n_basefuncs\n                ∇N = shape_symmetric_gradient(cv, q_point, j)\n                Ke[i, j] += δ∇N ⊡ dσdϵ ⊡ ∇N * dΩ\n            end\n        end\n    end\n    assemble!(assembler, celldofs(cell), Ke)\nend\n\nfunction solve()\n    # Import grid from abaqus mesh\n    grid = get_ferrite_grid(joinpath(@__DIR__, \"compact_tension.inp\"))\n\n    # Setup the interpolation and integration for each field\n    dim=Ferrite.getdim(grid)\n    grid_keys = [\"CPS4R\", \"CPS3\"]\n    qr = Dict(\"CPS4R\"=>QuadratureRule{dim, RefCube}(2), \"CPS3\"=>QuadratureRule{dim, RefTetrahedron}(1))\n    ip = Dict(\"CPS4R\"=>Lagrange{dim, RefCube, 1}(), \"CPS3\"=>Lagrange{dim, RefTetrahedron, 1}())\n    cv = Dict(key=>CellVectorValues(qr[key], ip[key]) for key in keys(ip))\n\n    # Setup the MixedDofHandler\n    fields = Dict(key=>Field(:u, ip[key], dim) for key in keys(ip))\n    dh = MixedDofHandler(grid)\n    for key in grid_keys # Use grid_keys to ensure correct order\n        push!(dh, FieldHandler([fields[key]], getcellset(grid, key)))\n    end\n    close!(dh)\n\n    # Add boundary conditions\n    ch = ConstraintHandler(dh);\n    bc_sym = Dirichlet(:u, getfaceset(grid, \"Symmetry\"), (x, t) -> 0, 1)\n    bc_hole = Dirichlet(:u, getfaceset(grid, \"Hole\"), (x, t) -> Vec{2}((-t, 0.0)), [1,2])\n\n    # Happens to be only quad elements on constrainted surfaces. How to do this more generally?\n    add!(ch, dh.fieldhandlers[1], bc_sym)\n    add!(ch, dh.fieldhandlers[1], bc_hole)\n    close!(ch)\n\n    # Assemble stiffness matrix\n    K = create_sparsity_pattern(dh);\n    doassemble!(cv, K, dh)\n\n    # Solve linear equation system\n    f = zeros(ndofs(dh))\n    update!(ch, 1.0)\n    apply!(K, f, ch)\n    u = K\\f\n\n    # Save displacement field\n    vtk_grid(joinpath(@__DIR__, \"mixed_dof_handler\"), dh) do vtk\n        vtk_point_data(vtk, dh, u)\n    end\nend\n\nsolve()\n\n# This file was generated using Literate.jl, https://github.com/fredrikekre/Literate.jl","category":"page"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"","category":"page"},{"location":"examples/mixed_dof_handler/","page":"Using the MixedDofHandler","title":"Using the MixedDofHandler","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/compact_tension/","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"EditURL = \"https://github.com/KnutAM/FerriteMeshParser.jl/blob/main/docs/src/literate/compact_tension.jl\"","category":"page"},{"location":"examples/compact_tension/#d-mixed-mesh-import","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"","category":"section"},{"location":"examples/compact_tension/","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"In this example, we will import a 2d mesh of a Compact Tension (CT) specimen from Abaqus. The mesh has both triangular and quadrilateral cells, and we define a few sets in Abaqus.","category":"page"},{"location":"examples/compact_tension/#Abaqus-setup","page":"2d mixed mesh import","title":"Abaqus setup","text":"","category":"section"},{"location":"examples/compact_tension/","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"(Image: ) Figure 1: Geometry and sets, mesh overview and detailed mesh from Abaqus.","category":"page"},{"location":"examples/compact_tension/","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"We have created sets for the hole (blue line: \"Hole\"), the symmetry edge (red line: \"Symmetry\"), and the crack zone (green area: \"CrackZone\").","category":"page"},{"location":"examples/compact_tension/#Importing-mesh","page":"2d mixed mesh import","title":"Importing mesh","text":"","category":"section"},{"location":"examples/compact_tension/","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"The mesh above was created in Abaqus cae, and in this example we import the generated input file: compact_tension.inp","category":"page"},{"location":"examples/compact_tension/","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"using Ferrite, FerriteMeshParser\n\ngrid = get_ferrite_grid(\"compact_tension.inp\")","category":"page"},{"location":"examples/compact_tension/","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"We can now inspect this grid, showing that we have different cell types","category":"page"},{"location":"examples/compact_tension/","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"println(typeof(grid))\nprintln(unique(typeof.(getcells(grid))))    # The different cell types in the grid","category":"page"},{"location":"examples/compact_tension/","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"Furthermore, the node and cell sets are imported","category":"page"},{"location":"examples/compact_tension/","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"println([(key, length(set)) for (key, set) in getnodesets(grid)])\nprintln([(key, length(set)) for (key, set) in getcellsets(grid)])","category":"page"},{"location":"examples/compact_tension/","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"As we see, in addition to the sets created in Abaqus, the cellsets also include a set for each abaqus element type (useful if you for example defined reduced integration in only part of the domain and want to have this in Ferrite). Finally, facesets are automatically created by default (can be turned off by generate_facesets=false argument) based on the nodesets:","category":"page"},{"location":"examples/compact_tension/","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"println([(key, length(set)) for (key, set) in getfacesets(grid)])","category":"page"},{"location":"examples/compact_tension/","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"Clearly, the faceset \"CrackZone\" doesn't make much sense, but unless the mesh is very large it doesn't hurt. The facesets can be created manually from each nodeset by using the create_faceset function:","category":"page"},{"location":"examples/compact_tension/","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"faceset = create_faceset(grid, getnodeset(grid,\"Hole\"));\nnothing #hide","category":"page"},{"location":"examples/compact_tension/","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"This can if desired be merged into the grid by","category":"page"},{"location":"examples/compact_tension/","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"merge!(getfacesets(grid), Dict(\"HoleManual\" => faceset))\nprintln([(key, length(set)) for (key, set) in getfacesets(grid)])","category":"page"},{"location":"examples/compact_tension/#compact-tension-plain-program","page":"2d mixed mesh import","title":"Plain Program","text":"","category":"section"},{"location":"examples/compact_tension/","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"Below follows a version of the program without any comments. The file is also available here: compact_tension.jl","category":"page"},{"location":"examples/compact_tension/","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"using Ferrite, FerriteMeshParser\n\ngrid = get_ferrite_grid(\"compact_tension.inp\")\n\nprintln(typeof(grid))\nprintln(unique(typeof.(getcells(grid))))    # The different cell types in the grid\n\nprintln([(key, length(set)) for (key, set) in getnodesets(grid)])\nprintln([(key, length(set)) for (key, set) in getcellsets(grid)])\n\nprintln([(key, length(set)) for (key, set) in getfacesets(grid)])\n\nfaceset = create_faceset(grid, getnodeset(grid,\"Hole\"));\n\nmerge!(getfacesets(grid), Dict(\"HoleManual\" => faceset))\nprintln([(key, length(set)) for (key, set) in getfacesets(grid)])\n\n# This file was generated using Literate.jl, https://github.com/fredrikekre/Literate.jl","category":"page"},{"location":"examples/compact_tension/","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"","category":"page"},{"location":"examples/compact_tension/","page":"2d mixed mesh import","title":"2d mixed mesh import","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = FerriteMeshParser","category":"page"},{"location":"#FerriteMeshParser","page":"Home","title":"FerriteMeshParser","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FerriteMeshParser is used to parse a mesh file (currently, only Abaqus input files are supported) into a Ferrite.Grid . The main exported function is get_ferrite_grid, which allows you to import an abaqus mesh simply as ","category":"page"},{"location":"","page":"Home","title":"Home","text":"grid = get_ferrite_grid(\"myabaqusinput.inp\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that the .inp file extension is required to automatically detect that it is an Abaqus input file. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"There are currently a few key limitations","category":"page"},{"location":"","page":"Home","title":"Home","text":"Only one part/instance from Abaqus is supported\nThe node and element numbering must be consecutive (i.e. no missing numbers allowed)","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"get_ferrite_grid","category":"page"},{"location":"#FerriteMeshParser.get_ferrite_grid","page":"Home","title":"FerriteMeshParser.get_ferrite_grid","text":"function get_ferrite_grid(filename; meshformat=AutomaticMeshFormat(), user_elements=Dict{String,DataType}(), generate_facesets=true)\n\nGreate a `Ferrite.Grid` by reading in the file specified by `filename`.\n\n## Optional arguments (default)\n* `meshformat` (`FerriteMeshParser.AutomaticMeshFormat()`): Which format the mesh \n  is given in, normally automatically detected by the file extension\n* `user_elements` (`Dict{String,DataType}()`): Used to add extra elements not supported,\n  might require separate cell constructor.\n* `generate_facesets` (`true`): Should facesets be detected automatically from all nodesets?\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"create_faceset","category":"page"},{"location":"#FerriteMeshParser.create_faceset","page":"Home","title":"FerriteMeshParser.create_faceset","text":"create_faceset(grid::Ferrite.AbstractGrid, nodeset::Set{Int}, cellset::Union{Nothing,Set{Int}}=nothing)\n\nFind the faces in the grid for which all nodes are in nodeset. Return them as a Set{FaceIndex}. A cellset can be given to only look only for faces amongst those cells to speed up the computation.  Otherwise the search is over all cells.\n\nThis function is normally only required if calling get_ferrite_grid with generate_facesets=false.  The created faceset can be added to the grid as merge!(getfacesets(grid), Dict(\"facesetkey\" => faceset\n\n\n\n\n\n","category":"function"}]
}
